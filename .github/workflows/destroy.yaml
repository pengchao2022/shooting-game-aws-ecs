name: Destroy Shooting Game Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      confirm_destroy:
        description: 'Type "DESTROY" to confirm destruction'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: shooting-game

jobs:
  get-aws-account-id:
    name: Get AWS Account ID
    runs-on: ubuntu-latest
    outputs:
      account_id: ${{ steps.get-account-id.outputs.account_id }}
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      id: get-account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "AWS Account ID: $ACCOUNT_ID"

  validate-destroy:
    name: Validate Destroy Request
    runs-on: ubuntu-latest
    needs: get-aws-account-id
    
    steps:
    - name: Check confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
          echo "‚ùå Destruction not confirmed. Please type 'DESTROY' to confirm."
          exit 1
        fi
        echo "‚úÖ Destruction confirmed for environment: ${{ github.event.inputs.environment }}"

  destroy-infrastructure:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-destroy, get-aws-account-id]
    environment: ${{ github.event.inputs.environment }}
    outputs:
      resource_count: ${{ steps.terraform-state.outputs.resource_count }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Update Terraform Variables for Destroy
      run: |
        cd terraform
        # Update sensitive variables for destroy
        sed -i "s|db_username = \".*\"|db_username = \"${{ secrets.DB_USERNAME }}\"|" terraform.tfvars
        sed -i "s|db_password = \".*\"|db_password = \"${{ secrets.DB_PASSWORD }}\"|" terraform.tfvars
        
        echo "Updated terraform.tfvars with current values for destroy:"
        cat terraform.tfvars

    - name: Get Terraform State Info
      id: terraform-state
      run: |
        cd terraform
        RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l || echo "0")
        echo "resource_count=$RESOURCE_COUNT" >> $GITHUB_OUTPUT
        echo "Current resource count: $RESOURCE_COUNT"

    - name: Destroy Infrastructure
      run: |
        cd terraform
        terraform destroy -auto-approve -var-file="terraform.tfvars"

    - name: Clean up ECR Images
      run: |
        # Clean up frontend images
        echo "Cleaning up ECR images for frontend..."
        aws ecr list-images \
          --repository-name ${{ env.PROJECT_NAME }}-frontend \
          --region ${{ env.AWS_REGION }} \
          --query 'imageIds[?imageTag!=`latest`]' \
          --output text | \
        while read imageDigest; do
          if [ -n "$imageDigest" ]; then
            aws ecr batch-delete-image \
              --repository-name ${{ env.PROJECT_NAME }}-frontend \
              --image-ids imageDigest=$imageDigest \
              --region ${{ env.AWS_REGION }}
          fi
        done || echo "No frontend images to delete or repository doesn't exist"

        # Clean up backend images  
        echo "Cleaning up ECR images for backend..."
        aws ecr list-images \
          --repository-name ${{ env.PROJECT_NAME }}-backend \
          --region ${{ env.AWS_REGION }} \
          --query 'imageIds[?imageTag!=`latest`]' \
          --output text | \
        while read imageDigest; do
          if [ -n "$imageDigest" ]; then
            aws ecr batch-delete-image \
              --repository-name ${{ env.PROJECT_NAME }}-backend \
              --image-ids imageDigest=$imageDigest \
              --region ${{ env.AWS_REGION }}
          fi
        done || echo "No backend images to delete or repository doesn't exist"

    - name: Notify Destruction Complete
      run: |
        echo "üóëÔ∏è Infrastructure destruction completed for environment: ${{ github.event.inputs.environment }}"
        echo "Destroyed approximately ${{ steps.terraform-state.outputs.resource_count }} resources"

  destroy-summary:
    name: Destruction Summary
    runs-on: ubuntu-latest
    needs: destroy-infrastructure
    if: always()

    steps:
    - name: Show Destruction Summary
      run: |
        echo "=== DESTRUCTION SUMMARY ==="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Repository: ${{ github.repository }}"
        echo "Destroyed by: ${{ github.actor }}"
        echo "Resources Destroyed: ${{ needs.destroy-infrastructure.outputs.resource_count }}"
        echo "Status: ${{ needs.destroy-infrastructure.result }}"
        
        if [ "${{ needs.destroy-infrastructure.result }}" == "success" ]; then
          echo "‚úÖ Infrastructure destruction completed successfully!"
        else
          echo "‚ùå Infrastructure destruction failed!"
          echo "Please check the workflow logs for details."
        fi