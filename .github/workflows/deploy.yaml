name: Deploy to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: shooting-game

jobs:
  terraform-infrastructure:
    name: Terraform Create Infrastructure
    runs-on: ubuntu-latest
    
    outputs:
      ecr_frontend_url: ${{ steps.set-outputs.outputs.ecr_frontend_url }}
      ecr_backend_url: ${{ steps.set-outputs.outputs.ecr_backend_url }}
      ecs_cluster_name: ${{ steps.set-outputs.outputs.ecs_cluster_name }}
      frontend_service_name: ${{ steps.set-outputs.outputs.frontend_service_name }}
      backend_service_name: ${{ steps.set-outputs.outputs.backend_service_name }}
      frontend_url: ${{ steps.set-outputs.outputs.frontend_url }}
      backend_url: ${{ steps.set-outputs.outputs.backend_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      id: get-account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Update Terraform variables
      run: |
        cd terraform
        # Update database credentials
        sed -i "s|db_username = \".*\"|db_username = \"${{ secrets.DB_USERNAME }}\"|" terraform.tfvars
        sed -i "s|db_password = \".*\"|db_password = \"${{ secrets.DB_PASSWORD }}\"|" terraform.tfvars
        # Use ECR images for infrastructure creation
        sed -i "s|frontend_image = \".*\"|frontend_image = \"${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}-frontend:latest\"|" terraform.tfvars
        sed -i "s|backend_image = \".*\"|backend_image = \"${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}-backend:latest\"|" terraform.tfvars

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: Set job outputs
      id: set-outputs
      run: |
        cd terraform
        
        ECR_FRONTEND=$(terraform output -raw ecr_frontend_repository_url)
        ECR_BACKEND=$(terraform output -raw ecr_backend_repository_url)
        ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)
        FRONTEND_SERVICE=$(terraform output -raw frontend_service_name)
        BACKEND_SERVICE=$(terraform output -raw backend_service_name)
        FRONTEND_URL=$(terraform output -raw frontend_url)
        BACKEND_URL=$(terraform output -raw backend_url)
        
        echo "ecr_frontend_url=$ECR_FRONTEND" >> $GITHUB_OUTPUT
        echo "ecr_backend_url=$ECR_BACKEND" >> $GITHUB_OUTPUT
        echo "ecs_cluster_name=$ECS_CLUSTER" >> $GITHUB_OUTPUT
        echo "frontend_service_name=$FRONTEND_SERVICE" >> $GITHUB_OUTPUT
        echo "backend_service_name=$BACKEND_SERVICE" >> $GITHUB_OUTPUT
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT

  deploy-applications:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push frontend image
      run: |
        cd frontend
        # 构建并推送带 commit hash 的镜像
        docker build -t ${{ needs.terraform-infrastructure.outputs.ecr_frontend_url }}:${{ github.sha }} .
        docker push ${{ needs.terraform-infrastructure.outputs.ecr_frontend_url }}:${{ github.sha }}
        
        # 同时推送 latest 标签
        docker tag ${{ needs.terraform-infrastructure.outputs.ecr_frontend_url }}:${{ github.sha }} ${{ needs.terraform-infrastructure.outputs.ecr_frontend_url }}:latest
        docker push ${{ needs.terraform-infrastructure.outputs.ecr_frontend_url }}:latest

    - name: Build and push backend image
      run: |
        cd backend
        # 构建并推送带 commit hash 的镜像
        docker build -t ${{ needs.terraform-infrastructure.outputs.ecr_backend_url }}:${{ github.sha }} .
        docker push ${{ needs.terraform-infrastructure.outputs.ecr_backend_url }}:${{ github.sha }}
        
        # 同时推送 latest 标签
        docker tag ${{ needs.terraform-infrastructure.outputs.ecr_backend_url }}:${{ github.sha }} ${{ needs.terraform-infrastructure.outputs.ecr_backend_url }}:latest
        docker push ${{ needs.terraform-infrastructure.outputs.ecr_backend_url }}:latest

    - name: Update ECS services
      run: |
        # 强制重新部署前端服务（使用新的 latest 镜像）
        aws ecs update-service \
          --cluster ${{ needs.terraform-infrastructure.outputs.ecs_cluster_name }} \
          --service ${{ needs.terraform-infrastructure.outputs.frontend_service_name }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

        # 强制重新部署后端服务（使用新的 latest 镜像）
        aws ecs update-service \
          --cluster ${{ needs.terraform-infrastructure.outputs.ecs_cluster_name }} \
          --service ${{ needs.terraform-infrastructure.outputs.backend_service_name }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for services to stabilize
      run: |
        echo "Waiting for ECS services to stabilize..."
        sleep 60
        
        # 等待服务稳定
        aws ecs wait services-stable \
          --cluster ${{ needs.terraform-infrastructure.outputs.ecs_cluster_name }} \
          --service ${{ needs.terraform-infrastructure.outputs.frontend_service_name }} \
          --region ${{ env.AWS_REGION }} || echo "Frontend service check completed"
        
        aws ecs wait services-stable \
          --cluster ${{ needs.terraform-infrastructure.outputs.ecs_cluster_name }} \
          --service ${{ needs.terraform-infrastructure.outputs.backend_service_name }} \
          --region ${{ env.AWS_REGION }} || echo "Backend service check completed"

    - name: Show deployment results
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "Frontend URL: ${{ needs.terraform-infrastructure.outputs.frontend_url }}"
        echo "Backend URL: ${{ needs.terraform-infrastructure.outputs.backend_url }}"